{"version":3,"sources":["webpack:///./js/timer.js","webpack:///./js/promice/task-1.js","webpack:///./js/promice/task-2.js","webpack:///./js/promice/task-3.js","webpack:///./js/color-switch.js"],"names":["refs","seconds","document","querySelector","minutes","hours","days","timer","pad","value","String","padStart","targetDate","Date","setInterval","time","currentTime","now","Math","floor","textContent","delay","ms","Promise","resolve","setTimeout","logger","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","random","id","logSuccess","logError","warn","amount","catch","colors","btnStartRef","btnStopRef","body","setRandomColor","color","length","style","backgroundColor","interval","addEventListener","disabled","clearInterval"],"mappings":"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","file":"main.be656d4efe3691c3e79e.js","sourcesContent":["const refs = {\n  seconds: document.querySelector(`span[data-value=\"days\"]`),\n  minutes: document.querySelector(`span[data-value=\"minutes\"]`),\n  hours: document.querySelector(`span[data-value=\"hours\"]`),\n  days: document.querySelector(`span[data-value=\"days\"]`),\n  timer: document.querySelector('.timer'),\n};\n\nconst timer = {\n  start() {\n    const targetDate = new Date('Dec 31, 2020');\n    setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = targetDate - currentTime;\n      updateClockFace(deltaTime);\n    }, 1000);\n  },\n};\ntimer.start();\n\nfunction updateClockFace(time) {\n  const seconds = pad(Math.floor((time % (1000 * 60)) / 1000));\n  const minutes = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n  const hours = pad(\n    Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n  );\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n\n  refs.timer.textContent = `${days}:${hours}:${minutes}:${seconds}`;\n}\n\nfunction pad(value) {\n  return String(value).padStart(2, '0');\n}\n","const delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger);\ndelay(1000).then(logger);\ndelay(1500).then(logger);\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise(resolve => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    resolve(updatedUsers);\n  });\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","const colors = [\n  '#FFFFFF',\n  '#2196F3',\n  '#4CAF50',\n  '#FF9800',\n  '#009688',\n  '#795548',\n];\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst refs = {\n  btnStartRef: document.querySelector('button[data-action=\"start\"]'),\n  btnStopRef: document.querySelector('button[data-action=\"stop\"]'),\n  body: document.querySelector('body'),\n};\n\nsetRandomColor = () => {\n  const color = colors[randomIntegerFromInterval(0, colors.length - 1)];\n  refs.body.style.backgroundColor = color;\n};\n\nlet interval = null;\n\nrefs.btnStartRef.addEventListener('click', () => {\n  interval = setInterval(() => setRandomColor(), 1000);\n  refs.btnStartRef.disabled = true;\n});\n\nrefs.btnStopRef.addEventListener('click', () => {\n  clearInterval(interval);\n  refs.btnStartRef.disabled = false;\n});\n"],"sourceRoot":""}